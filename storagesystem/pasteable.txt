---@diagnostic disable

-- del /usr/lib/longmsg_message.lua; edit /usr/lib/longmsg_message.lua
longmsg = require "longmsg_message"
fa = require("fetch_api")
ti = require("trackinventories")
ih = require("inventoryhigh")
Helper = require("Helper")
Nodes = require("navigation_nodes")
Drones = require("fetch_high")
Station = require("Station")
gdraw = require("graphics.GraphicsDraw")
longmsg.setupDebug(100, 20)
Drones.registerNearby()
TreeNode = require("TreeNode")


longmsg.setupDebug(90, 10, nil, nil, "thread_drone freed")
longmsg.setupDebug(80, 5, nil, nil, "thread_drone queue")

droneaddr = next(fetch_high.drones)

ih.scanAll()

-- fa.send(nil, nil, 1, fa.actions.move(1, 0, 2), fa.actions.scan(1, sides.negx))
fa.send(nil, nil, 1, fa.actions.scan(1, sides.negx))
fa.send(nil, nil, 1, fa.actions.updateposition(5, 5, 9))

fa.send(nil, nil, 1, fa.actions.moveto(3, 4, 8))

ti.makeNew(1, 1, 4, 4, 10, sides.negx)

ih.allItems()

droneaddr = next(fetch_high.drones)
fetch_high.scan(droneaddr, 1)

fhigh.Location.pathfind(fhigh.drones[droneaddr], ti.getData(1))

ih.move(1, 1, 2, 10, 3)

-- for k, v in pairs(ih.allItems()) do print(v.size,Item.getlabel(v)) end

-- event.listen("tablet_use",function(_,tbl) print(serialization.serialize(tbl));computer.beep(200,0.1) end)

timer_last = 0; function timer() local temp = timer_last; timer_last = timer_func(); return timer_last - temp ,math.floor((timer_last - temp)*20 + 0.5) end; timer_func = computer.uptime

component.gpu.setActiveBuffer(1)

-- component.gpu.setActiveBuffer(1); timer(); for i = 1, 10000 do component.gpu.set(i % 100, i % 31, "ABC") end;component.gpu.setActiveBuffer(0); print(timer())
-- component.gpu.setActiveBuffer(0); timer(); for i = 1, 10000 do component.gpu.setBackground(1) end;component.gpu.setActiveBuffer(0); print(timer())

-- for i = 1,100,4 do print(i,string.char(i,i+1,i+2,i+3)) end


iron = Helper.find(inventoryhigh.allItems(),function(v,k) return Item.getname(v) == "minecraft:iron_block" end)
iron1 = Item.copy(iron,0,1)
reci = {needed = {iron1},stationType="crafting",using={{{2,1}}}}
w = Station.queue(reci,1)


craf = Station.pool.objects[1].object

stationInstance = craf
recipe = reci
times = 1


q = Station.executeRecipe(craf,reci,1)

r = inventoryhigh.importUnknown(15,13)  
InventoryHigh.import(15, 13, iron1, 5) -- works

deposit = inventoryhigh.findDeposit(inventoryhigh.getItemFoundAt(iron1),5)
inventoryhigh.moveMany(iron1, {{15, 13, 5, 0}}, deposit.foundAtList)


oold = inventoryhigh.import; 
inventoryhigh.import = function(...) print(serialization.serialize({...},math.huge)); return oold(...) end

ooldMove = inventoryhigh.moveMany
inventoryhigh.moveMany = function(...) print("moveMany ",serialization.serialize({...},math.huge)); return ooldMove(...) end


gdraw.printBrackets(tostring(w), function(i) return gdraw.colorRGB(1/(i/5+1),(i%7)/7,(i%2)) end,nil,0)

gdraw.printBrackets("{{{{{{{{{{{{{{}}}}}}}}}}}}}}", function(i) return gdraw.colorRGB(1/(i/5+1),(i%7)/7,(i%2)) end,nil,0)



reci = reci or {}; local i = 1; for k in component.inventory_controller.getAllStacks(3) do if k.name then local se=serialization.serialize(k); if not reci[se] then reci[se] = {} end reci[se][i]=1; end i=i+1 end 

reci = {}; local i = 1; for k in component.inventory_controller.getAllStacks(3) do if k.name then local se=(k.name .. " " .. k.damage); if not reci[se] then reci[se] = {} end reci[se][i]=1; end i=i+1 end 

for i = 1,5 do component.robot.select(i); local k = ic.getStackInInternalSlot(i);local se=(k.name .. " " .. k.damage); for pos,v in pairs(reci[se]) do ic.dropIntoSlot(3,pos,v) end end



function splitLines(text)
    local out = {}
    for m in string.gmatch(text,"(.-)[\n\0]") do
        out[#out+1] = m
    end
    return out
end

function writeSlow(lines)
    for i, line in ipairs(lines) do
        if event.pullMultiple("drag","interrupted") == "interrupted" then
            return
        end
        print(line)
    end
end


function printTables(tbl,ignoreKeys, out, done, indent,key)
    if ignoreKeys and ignoreKeys[key] then 
        return 
    end 
    done = done or {}
    indent = indent or ""
    if out then
        if type(out) == "table" then
            out[#out+1] = indent..tostring(key) .. "\t" .. tostring(tbl)
        else
            out(indent,(key), (tbl))
        end

    else 
        print(indent,key,tbl)
    end
    if type(tbl) == "table" and not done[tbl] then 
        done[tbl] = true
        for k,v in pairs(tbl) do 
            printTables(v,ignoreKeys,out,done,indent .."\t",k)
        end 
    end 
    return out
end


function writeMultiline() local lines = {}; while true do local r = term.read({history={}}); if r then lines[#lines+1]=r else break end end; return lines end
function codeMultiline() return load(table.concat(writeMultiline(),"\n"))() end


function xprint(indent,key,tbl) term.write(tostring(key)) end


timer() for i = 1, 1000 do   end;print(timer())


w = io.open(lpath,"w"); r = io.open(lpath,"r")

r:seek("set"); w:seek("set")
for i = 1, 1000 do local inp = r:read(1); if not inp then break end if inp == " " then inp = "\n" end w:write(inp) end

Stored = cachedarrayfile.make(lpath,"itemID amount prev next container","I3 I4 I3 I3 I1")
Stored:writeEntries({[3]={itemID = 5, amount = 63, prev = 0, next = 0}})


timer() for i = 1, 1000 do   end;print(timer())

dr.readSector(1): 1024 / 16t
dr.readSector(i): 1024 / 16t
dr.readSector(1025-i): 1024 / 16t
dr.readSector(1 + (i%4)*100): 1024 / 61



